Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Real Project

## steps

### 1\. look at big picture

#### frame the problem

##### goal

#### performance measure

##### RMSE

##### MAE

### 2\. get the data

#### quick look

#### test set

### 3\. discover and visualize the data to gain insights

### 4\. prepare the data for machine learning algorithms

### 5\. select a model and train it

### 6\. fine\-tune your model

### 7\. present your solution

### 8\. launch, monitor, and maintain your system

## manipulation
> leftSide=`true`


### quick look

#### head

#### info
> leftSide=`true`


#### value\_counts
> leftSide=`true`


#### describe
> leftSide=`true`


#### plot
> leftSide=`true`


### test set
> leftSide=`true`


#### test split

#### sklearn
> leftSide=`true`


##### model\_selection

###### train\_test\_split

###### StratifiedShuffleSplit
> leftSide=`true`


#### stratified sampling
> leftSide=`true`


### discover and visualize data
> leftSide=`true`


#### correlations

#### scatter\_matrix
> leftSide=`true`


#### attribute combinations
> leftSide=`true`


### preprocessing
> leftSide=`true`


#### data cleaning

##### na

###### get rid of the corresponding districts

####### dropna

###### get rid of the whole attribute
> leftSide=`true`


####### dropna

###### set the values to some value
> leftSide=`true`


####### fillna

###### sklearn

####### preprocessing

######## Imputer

######## LabelEncoder
> leftSide=`true`


######## OneHotEncoder
> leftSide=`true`


######## LabelBinarizer
> leftSide=`true`


#### feature scaling
> leftSide=`true`


##### min\-max scaling\(Normalization\)

##### standardization
> leftSide=`true`


##### sklearn
> leftSide=`true`


###### pipelines

####### StandardScaler

### model\-selection
> leftSide=`true`


#### train

#### evaluating
> leftSide=`true`


#### sklearn

##### metrics

###### mean\_squared\_error

##### linear\_model
> leftSide=`true`


###### LinearRegression

##### tree
> leftSide=`true`


###### DecisionTreeRegressor

##### model\_selection
> leftSide=`true`


###### cross\_val\_score

##### ensemble
> leftSide=`true`


###### RandomForestRegressor

##### externals
> leftSide=`true`


###### joblib

### fine\-tune model
> leftSide=`true`


#### grid\-search

#### randomized\-search
> leftSide=`true`


#### sklearn
> leftSide=`true`


##### model\_selection

###### gridSearchCV
