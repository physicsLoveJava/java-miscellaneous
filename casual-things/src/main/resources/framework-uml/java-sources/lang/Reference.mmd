Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Reference

## Type

### SoftReference

#### Cache

#### All soft references to softly\-reachable objects are guaranteed to have been <br/>cleared before the virtual machine throws an<br/>OutOfMemoryError

#### As long as the referent of a soft<br/>  reference is strongly reachable, that is, is actually in use, the soft<br/>  reference will not be cleared\.

#### matter with the memory, will be cleared when the memory is not enough

### WeakReference

#### Weak reference objects, which do not prevent their referents from being<br/> made finalizable, finalized, and then reclaimed\.  Weak references are most<br/> often used to implement canonicalizing mappings\.

#### matter with gc behavior, will be cleared when the gc happens

### PhantomReference

#### Phantom reference objects, which are enqueued after the collector<br/> determines that their referents may otherwise be reclaimed\.

#### Phantom<br/> references are most often used for scheduling pre\-mortem cleanup actions in<br/> a more flexible way than is possible with the Java finalization mechanism\.

#### will not be explictly cleared, just notify that the reference is goging to be cleaned 

## State
> leftSide=`true`


### Active

#### Newly\-created instances are active

#### Pending instance was added to pending\-Reference list
> leftSide=`true`


### Pending

#### waiting to be enqueued by the Reference\-handler thread

### Enqueued

#### registerd when created

#### remove from referenceQueue, it is made inactive
> leftSide=`true`


### Inactive

#### inactive state will never change again

## Encode
> leftSide=`true`


### Active

#### ReferenceQueue with instance

### Pending
> leftSide=`true`


#### ReferenceQueue with instance

#### next = Following instance in queue
> leftSide=`true`


### Enqueued
> leftSide=`true`


#### queue = ReferenceQueue\.Enqueued

#### next = Following instance in queue
> leftSide=`true`


### Inactive
> leftSide=`true`


#### queue = ReferenceQueue\.NULL

#### next = this
> leftSide=`true`

