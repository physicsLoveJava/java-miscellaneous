Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# design\-patterns

## creational

### simple factory
- FILE
<pre>src/main/resources/framework-uml/design-patterns/simple-factory-method/simple-factory-method.jpg</pre>

#### 优点

##### 根据参数创建类型，由于使用静态方法，也可以成为静态工厂方法

##### 可以和享元模式一起使用，而不需要每次都使用new关键字进行创建新对象

##### 生成的对象可能一开始并不存在，根据情况进行生成，参考Service\-Provider

##### 可以根据情况，生成某个类型的继承子类

##### 可以隐藏具体的实现细节

#### 缺点

##### 没有公有的，或者保护的构造器，无法进行继承

##### 对于程序员来说不友好，并不容易寻找

### factory method
- FILE
<pre>src/main/resources/framework-uml/design-patterns/factory-method.puml</pre>

#### Define an interface for creating an object, but let subclasses decide which class to instantiate\.<br/>Factory Method lets a class defer instantiation to subclasses\.

#### 将职责进行划分，具体的抽象细节由具体的子类来决定

#### 不是提供不同的产品类型，而是提供不同的产品工厂

#### 对象方法可以包含具体的逻辑，也可以单纯地创建对象

#### 具有层次结构的工厂与对应层次的对象
- FILE
<pre>src/main/resources/framework-uml/design-patterns/factory-method/parallel%20factory%20method.jpg</pre>

#### 虚构造器，多态工厂模式

#### 相对于简单工厂模式来说，更符合开闭原则，增加产品的同时不需要修改代码

#### 例子

##### java\.text\.format

##### java\.nio\.charset\.Charset

##### java\.net\.URLStreamHandlerFactory

##### java\.util\.EnumSet

###### RegularEnumSet

###### JumboEnumSet

##### javax\.xml\.bind\.JAXBContext

### abstract factory method
- FILE
<pre>src/main/resources/framework-uml/design-patterns/abstract-factory-method.puml</pre>

#### Provide an interface for creating families of related or dependent objects without specifying their concrete classes\.

#### 创建不同的产品族，对于不同的产品族提供支持（OCP）

#### 创建新的产品族，往往存在问题

#### 例子

##### javax\.xml\.parsers\.DocumentBuilderFactory

##### javax\.xml\.transform\.TransformerFactory

##### javax\.xml\.xpath\.XPathFactory

## structural

## Behavioral
