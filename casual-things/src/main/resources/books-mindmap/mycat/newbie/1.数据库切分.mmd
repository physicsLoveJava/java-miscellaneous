Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 数据库切分

## 应用

### OLTP

### OLAP

## 模型
> leftSide=`true`


### 关系型数据库

### NOSQL数据库
> leftSide=`true`


#### 临时性键值存储

##### memcached

##### redis
> leftSide=`true`


#### 永久性键值存储

##### ROMA

##### redis
> leftSide=`true`


#### 文档数据库

##### MongoDB

##### CouchDB
> leftSide=`true`


#### 面向列的数据库
> leftSide=`true`


##### Cassandra

##### HBase
> leftSide=`true`


## 数据分片
> leftSide=`true`


### 垂直（纵向）

#### 分库

#### 优点

##### 将单个数据库压力，转移到多个业务库上

#### 缺点
> leftSide=`true`


##### 业务存在单库性能瓶颈，不容易数据拓展跟性能提高

##### 扩库后，join的复杂性，只能通过接口方式解决，提高系统的复杂度

##### 事务处理复杂

### 水平（横向）

#### 分表

##### 将某个字段使用某种规则分散到多个库中

##### 用户ID取模

###### 相同数据用户的数据被分散到一个库中

##### 按照日期
> leftSide=`true`


##### 按照某个特定的字段取模
> leftSide=`true`


#### 优点
> leftSide=`true`


##### 拆分规则抽象好，join操作可以数据库来完成

##### 不存在单库大数据，高并发的性能瓶颈
> leftSide=`true`


##### 应用端改造较少
> leftSide=`true`


##### 提高系统的负载能力
> leftSide=`true`


#### 缺点
> leftSide=`true`


##### 拆分规则难以抽象

##### 分片事务一致性难以解决
> leftSide=`true`


##### 数据多次扩展难度跟维护量比较大
> leftSide=`true`


##### 跨库join性能较差
> leftSide=`true`


### 总体缺点

#### 引入分布式事务

#### 跨节点join
> leftSide=`true`


#### 跨节点合并排序分页问题
> leftSide=`true`


#### 多数据源管理问题
> leftSide=`true`


## 拆分原则

### 拆分维度

### join

#### 能不切分尽量不要切分

#### 合适的切分规则

#### 切分尽量通过数据冗余和表分组来降低跨库join

#### 数据库中间件对于join实现优劣难以把握，业务读取尽量少使用多表join

## 解决方案

### 客户端模式

#### 每个应用程序配置管理需要的数据源，直接访问各个数据库，在模块内完成数据的整合

### 中间代理层统一管理数据源，后端数据库集群对前端应用程序透明
