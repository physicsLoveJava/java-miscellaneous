Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# optimization

## 原因

### 子任务的耗时

#### 客户端连接服务器

#### 解析SQL

#### 生成执行计划

#### 执行，返回结果

##### 重要影响因素

### 时间分布

#### 网络

#### CPU计算

#### 生成统计信息和执行计划

#### 锁等待

#### 从底层存储引擎检索数据

#### 内存、CPU、I/O操作、上下文切换、系统调用

### 基本原因

#### 访问的数据太多

##### 程序是否需要太多的数据，过多的列？

##### 服务器是否访问超过需要的行

## 解决方法

### 基本方法

#### 分页操作

#### 多表关联返回需要的列

#### 查询取出需要的列，例如Binary字段

#### 某些不变的查询是否可以缓存化

### 查询重构

#### 复杂查询和简单查询的权衡

#### 切分查询

##### 一次删除，变成多次删除

#### 分解关联查询

##### 将某些查询缓存化，构建内存的哈希映射

### Mysql优化类型

#### 重新定义关联表的顺序

#### 外连接转化为内连接

#### 使用等价变换规则

#### 优化min,max,count

#### 预估并转化为常数表达式

#### 覆盖索引扫描

#### 子查询优化

#### 提前终止查询

#### IN 的二分查找优化

## 衡量
> leftSide=`true`


### 响应时间

#### 服务时间

##### 数据库执行查询真正花的时间

#### 排队时间
> leftSide=`true`


##### 服务器因为等待资源，在等待I/O操作完成，或者锁

### 扫描行数
> leftSide=`true`


### 返回的行数
> leftSide=`true`


## 访问开销
> leftSide=`true`


### Explain \-\- Type

#### 全表扫描

#### 索引扫描
> leftSide=`true`


#### 范围扫描
> leftSide=`true`


#### 唯一索引查询
> leftSide=`true`


#### 常数引用
> leftSide=`true`


## 通信协议
> leftSide=`true`


### 半双工

#### 只有一方在执行通信

#### 一端开始发出消息，另一端需要接受完整小心
> leftSide=`true`


## Mysql关联查询
> leftSide=`true`


### 连接查询

#### 嵌套循环查询

## 执行计划
> leftSide=`true`


### mysql总是从一个表开始嵌套循环，回溯完成所有表的关联

### Mysql通过预估需要读取的数据页来选择，读取的数据页越少，作为嵌套查询的外层，就能减少不必要的循环
> leftSide=`true`


### EXPLAIN EXTENDED 查询优化的SQL

## 查询优化器的局限性
> leftSide=`true`


### 关联子查询

#### Mysql通过加条件内联到in中，导致了潜在的大表问题，使用exists改写

### 松散索引查询
> leftSide=`true`


### 最大值和最小值的优化
> leftSide=`true`

