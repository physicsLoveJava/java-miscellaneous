Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Index

## 工作方式

### 根据索引的值，获取对应索引的位置，将其位置的数据获取出来

## 类型

### B\-Tree

#### 适用范围

##### 全键值

##### 范围

##### 键前缀

#### 索引按照最左列开始查找

### hash

#### 方式

##### 只有精确匹配索引所有的列的查询才有效

##### 对于每个行，对索引列计算哈希吗

#### 注意

##### 不存储字段的值

##### 哈希映射不保留顺序

###### 等值查询

##### 索引列必须全部匹配

### 全文索引

#### 适用范围

##### 查找文本中的关键词

## B\+Tree
> leftSide=`true`


### 每个叶子结点都包含下一个叶子结点的指针，方便叶子结点的范围遍历

## B\-Tree
> leftSide=`true`


### 每个叶子页到根的距离相同

### 所有的值按照顺序存储
> leftSide=`true`


## 优点
> leftSide=`true`


### 减少扫描的数据量

### 避免排序和临时表
> leftSide=`true`


### 随机IO变成顺序IO
> leftSide=`true`


## 策略

### 独立的列

### 前缀索引

### 聚集索引

#### 将BTree结构和数据行放在一起

##### 一个表只有一个

###### 主键

#### oracle

##### 索引组织表

#### 缺点

##### 二级索引需要两次索引查找

###### 二级索引保存的不是指向行的指针而是主键值

#### 做法

##### 按照主键顺序插入行

##### 避免随机的

###### 使用UUID作为聚集索引很糟糕

####### 内存缓存移除

####### 写入乱序，大量的页分裂

####### 数据碎片

### 覆盖索引

#### 索引包含查询的字段值

#### BTree

### 使用索引扫描做排序

#### 索引的列顺序和Order by 子句一直，同时列的排序方向也一直

### 压缩（前缀压缩）索引

### 冗余和重复索引

#### 避免

### 索引和锁

#### 某些语句可能导致某些数据行上的排他锁被占用
