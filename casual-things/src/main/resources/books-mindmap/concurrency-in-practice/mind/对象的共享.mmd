Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 对象的共享

## 核心

### 如果发布与共享对象，使得他们能被多线程同时访问

## 问题

### 单线程

#### 线程的读写操作对自己可见，修改可以用读取来反应

### 多线程

#### 在多线程环境下，某个线程的写操作，可能并不会在操作后，被另一个线程所看见，这个时候需要同步来保持

#### 指令重排序

#### 非volatile64位double,long变量

##### 分解为两个32位的操作

### 解决办法

#### 在进行状态访问的时候，进行同步操作

## 区别
> leftSide=`true`


### synchronized

#### 原子性

#### 临界区
> leftSide=`true`


#### 内存可见性
> leftSide=`true`


### volatile

#### 内存可见性

##### 因为不会被指令重排，所以对周围代码具有影响

#### 对状态变量进行状态检查

## 例子
> leftSide=`true`


### 线程安全的可变整数

#### 仅仅对set方法进行同步，并不能保证数值对于其他线程时正确的值

## 发布与逃逸

### 发布

#### 使得对象能够在作用域外进行访问

### 逃逸

#### 当某个对象不应该被发布而被发布了

#### 私有变量被发布

#### this引用被发布

### 通过工厂方法，使得this引用不被发布

## 线程封闭

### 将数据封闭在单个线程中，用来达到线程安全

### jdbc connection

### Adhoc, 有程序来保证封闭的安全性

### 栈封闭,局部变量

### Threadlocal

#### 引入耦合代码

## 不可变对象

## 安全发布

### 在静态初始化函数中初始化一个对象引用

### 将对象的引用保存在volatile域中或者AtomicReference对象中

### 将对象的引用保存在某个正确构造对象的final类型中

### 将对象的引用保存在一个由锁保护的域中
